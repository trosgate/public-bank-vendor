# Generated by Django 4.1.3 on 2023-02-20 11:04

from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields
import general_settings.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Branch/Unit Name')),
                ('location', models.CharField(choices=[('instation', 'In Station'), ('outstation', 'Out Station')], default='instation', max_length=20, verbose_name='location')),
                ('status', models.BooleanField(choices=[(False, 'Closed'), (True, 'Active')], default=True, verbose_name='Status')),
                ('inventory', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='This unit is the substantive ATM UNIT in charge of ATM consumables, request routing etc', verbose_name='This is ATM Unit')),
                ('slug', models.SlugField(max_length=120)),
            ],
            options={
                'verbose_name': 'Branch & Unit',
                'verbose_name_plural': 'Branch & Unit',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Service Category')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Order Priority')),
                ('status', models.BooleanField(choices=[(False, 'Disable'), (True, 'Active')], default=True, verbose_name='Status')),
                ('meta', models.BooleanField(choices=[(False, 'Other Vendor types'), (True, 'Core ATM Vendor')], help_text="Important:'Core ATM Vendor'- means the category is for ATM vendor explicitly. 'Other Vendor types'- means the category is for other vendor types that only need access to work like power vendor, cctv vendor etc ", verbose_name='Meta')),
                ('min_score', models.PositiveIntegerField(default=70, help_text='The Minimum pass mark to qualify an applicant', verbose_name='Minimum Score (%)')),
                ('max_member_per_team', models.PositiveIntegerField(default=5, help_text='The expected team size that will better manage our products or services.', verbose_name='Expected Team Size')),
                ('regional_availability', models.BooleanField(choices=[(False, 'Incapable'), (True, 'Capable')], default=True, help_text='How available is the vendor to work accross regions within the country and beyond.', verbose_name='Regional Availability')),
                ('instation', models.PositiveIntegerField(default=2, help_text='Goal is to know how long it can take vendor to get to instations in line with SLA).', verbose_name='Instation Response (Hours)')),
                ('outstation', models.PositiveIntegerField(default=6, help_text='Goal is to know how long it can take vendor to get to outstations in line with SLA).', verbose_name='Outstation Response (Hours)')),
                ('working_hours', models.BooleanField(choices=[(False, 'Available Every 24/7'), (True, 'Every 8am - 5pm')], default=True, help_text='How available is the vendor to work around the clock especially when night job is roll-out', verbose_name='Supporting Hours')),
                ('other_contractual_services', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Does vendor offer other contract based services?', verbose_name='Has other services/Products')),
                ('work_experience', models.PositiveIntegerField(choices=[(1, 'Less Than Five Years'), (2, 'Five to Ten Years'), (3, 'Above Ten Years')], default=1, help_text='The minimum number of working experince', verbose_name='Work Experience')),
                ('value_added_services', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='If vendor stands a chance, are they expected to give more added value like training etc?', verbose_name='Value Added Services')),
                ('parts_availability', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Does Vendor have parts available or need to buy on ad-hoc basis?', verbose_name='Product Parts')),
                ('emergency_plans', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Does Vendor have parts available to handle emergencies', verbose_name='Emergency Plans')),
                ('concurrent_offers', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Does Vendor have Ability to manage concurrent offers from us?', verbose_name='Manage Concurrent offers')),
            ],
            options={
                'verbose_name': 'Vendor Category',
                'verbose_name_plural': 'Vendor Categories',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Checklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(help_text='This checklist will be displayed when closing tickets', max_length=150, unique=True, verbose_name='checklist Item')),
                ('ordering', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Ticket Checklist',
                'verbose_name_plural': 'Ticket Checklist',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Inventory Category ')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Qty in Stock')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Order Priority')),
                ('status', models.CharField(choices=[('available', 'Available'), ('depleted', 'Depleted')], default='available', max_length=20, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'ATM Requisition',
                'verbose_name_plural': 'ATM Requisition',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Mailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_hosting_server', django_cryptography.fields.encrypt(models.CharField(blank=True, default='smtp.gmail.com', help_text='E.x: smtp.gmail.com', max_length=255, null=True, verbose_name='Email Hosting Server'))),
                ('email_hosting_server_password', django_cryptography.fields.encrypt(models.CharField(blank=True, default='ngnrfcsozfrxbgfx', max_length=255, null=True, verbose_name='Email Server Password'))),
                ('email_hosting_username', django_cryptography.fields.encrypt(models.CharField(blank=True, help_text='This is the email hosting username created', max_length=255, null=True, verbose_name='Email Server Username'))),
                ('from_email', django_cryptography.fields.encrypt(models.CharField(blank=True, help_text='This email will be the site-wide support email for all email sending', max_length=255, null=True, verbose_name='Site-Wide Support Email'))),
                ('email_use_tls', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='If your hosting support both SSL and TLS, we recommend the use of TLS', null=True, verbose_name='Use TLS'))),
                ('email_use_ssl', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='If SSL is set to "Yes", TLS should be "No", and vise-versa', null=True, verbose_name='Use SSL'))),
                ('email_fail_silently', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'Show Error'), (True, 'Hide Error')], default=True, help_text='if you want users to see errors with your misconfiguration, set to "Show Error". We recommend that you Hide Error', null=True, verbose_name='Email Fail Silently'))),
                ('email_hosting_server_port', models.PositiveSmallIntegerField(blank=True, default=587, help_text='Usually 587 but confirm from your hosting company', null=True, verbose_name='Email Server Port')),
                ('email_timeout', models.PositiveSmallIntegerField(blank=True, default=60, help_text='the timeout time for email', null=True, verbose_name='Email Timeout')),
            ],
            options={
                'verbose_name': 'Mailer Settings',
                'verbose_name_plural': 'Mailer Settings',
            },
        ),
        migrations.CreateModel(
            name='SLAExceptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='Heavy rainfall inturrupted work', help_text='These are critical factors that could cause delay in SLA arrival time/pause a job temporarily', max_length=200, null=True, unique=True, verbose_name='Breaching Exceptions')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Order Priority')),
            ],
            options={
                'verbose_name': 'SLA Exceptions',
                'verbose_name_plural': 'SLA Exceptions',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='TestMailSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', django_cryptography.fields.encrypt(models.CharField(blank=True, default='My Test Email', max_length=20, null=True, verbose_name='Testing Email'))),
                ('test_email', django_cryptography.fields.encrypt(models.EmailField(blank=True, help_text='Test the email settings by sending a Test mail', max_length=100, null=True, verbose_name='Receiver Email'))),
            ],
            options={
                'verbose_name': 'Test Email Settings',
                'verbose_name_plural': 'Test Email',
            },
        ),
        migrations.CreateModel(
            name='WebsiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(blank=True, default='Example', max_length=50, null=True, unique=True, verbose_name='Site Name')),
                ('site_Logo', models.ImageField(blank=True, default='site/logo.png', null=True, upload_to=general_settings.models.site_path, verbose_name='Site Logo')),
                ('protocol', models.CharField(choices=[('https://', 'Secure:> https://'), ('http://', 'Insecure:> http://')], default='https://', help_text='Warning! Make sure you have SSL Certificate for your site before switing to Secure options', max_length=20, verbose_name='Protocol Type')),
                ('site_domain', models.CharField(blank=True, default='example.com', help_text='E.x: example.com', max_length=255, null=True, verbose_name='Website Domain')),
                ('button_color', models.CharField(blank=True, default='purple', help_text="Customize colors for signup, login, any other visitor buttons. Example '3F0F8FF', or 'red' or 'blue' or 'purple' or any css color code. Warning!: Donnot add quotation marks around the color attributes", max_length=100, null=True, verbose_name='Visitor Buttons')),
                ('navbar_color', models.CharField(blank=True, default='purple', help_text="Customize colors for Navbar. Example '3F0F8FF', or 'red' or 'blue' or 'purple' or any css color code. Warning!: Donnot add quotation marks around the color attributes", max_length=100, null=True, verbose_name='NavBar Color')),
                ('twitter_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Twitter page', max_length=255, null=True, verbose_name='Twitter Page')),
                ('instagram_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Instagram page', max_length=255, null=True, verbose_name='Instagram Page')),
                ('youtube_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Youtube page', max_length=255, null=True, verbose_name='Youtube Page')),
                ('facebook_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Facebook page', max_length=255, null=True, verbose_name='Facebook Page')),
                ('site_description', models.CharField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=150, null=True, verbose_name='Site Description')),
                ('home_title', models.CharField(blank=True, default='Welcome to Ivendor', max_length=150, null=True, verbose_name='Home Title')),
                ('home_preview', models.CharField(blank=True, default='Select your option to get in', max_length=150, null=True, verbose_name='Home Preview')),
                ('login_preview', models.CharField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=150, null=True, verbose_name='Home Login Preview')),
                ('reset_preview', models.CharField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=150, null=True, verbose_name='Home Reset Preview')),
                ('profile_description', models.TextField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=1500, null=True, verbose_name='Default User profile description')),
                ('team_banner_title', models.CharField(blank=True, default='Your Workspace', max_length=100, null=True, verbose_name='Default User profile description')),
                ('team_banner_preview', models.TextField(blank=True, default="Working remotely with your team shouldn't be nightmare. Create teams, add your perfect staffs online and supervise them. It's that simple.", max_length=250, null=True, verbose_name='Default User profile description')),
                ('applicant_instruction', models.TextField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=1500, null=True, verbose_name='Application Instruction')),
                ('invite_message', models.TextField(blank=True, default='Ivendor Management System for ATM Vendors', max_length=1500, null=True, verbose_name='Invitation Message')),
                ('warning_time_schedule', models.PositiveIntegerField(default=2, help_text='By default the system will attempt to logout user every 2hrs with a prompt. You can change it in hours or days', verbose_name='Warning Time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Website Settings',
                'verbose_name_plural': 'Website Settings',
            },
        ),
        migrations.CreateModel(
            name='VendorCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Company Short Name')),
                ('registered_name', models.CharField(max_length=150, verbose_name='Company Registered Name')),
                ('email', models.EmailField(max_length=100, verbose_name='Business/Support Email')),
                ('purpose', models.TextField(blank=True, max_length=255, verbose_name='Purpose')),
                ('ordering', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Order Priority')),
                ('status', models.BooleanField(choices=[(False, 'Dissolved'), (True, 'Contracted')], default=True, verbose_name='Status')),
                ('ticket_response', models.PositiveIntegerField(default=15, help_text='Counting from the time ticket was created, how long should we wait (in minutes) before sending reminder? E.x: 15 means -> 15 minutes. This works on condition that ticket was not assigned within every 15 minutes', verbose_name='New Ticket Response (Minutes)')),
                ('instation_arrival', models.PositiveIntegerField(default=2, help_text='SLA Tracking will be invoked when ticket is finally assigned (Goal is to know how long it takes vendor to get to instations in line with SLA).', verbose_name='In station Arrival (Hours)')),
                ('outstation_arrival', models.PositiveIntegerField(default=2, help_text='SLA Tracking will be invoked when ticket is finally assigned (Goal is to know how long it takes vendor to get to outstations in line with SLA).', verbose_name='Out station Arrival (Hours)')),
                ('working_hours', models.BooleanField(choices=[(False, 'Every 24/7'), (True, 'Every 8am - 5pm')], default=True, help_text="The 'Every 24/7' means ticket will be tracked as and when it is opened. The 'Every 8am - 5pm' means tickets will be tracked from 8am-5pm and deffered to another day if ticket was opened beyond working hours", verbose_name='Supporting Hours')),
                ('track_working_time', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text="This feature is the default behaviour of the software. 'Yes' means, it is MANDATORY for Staffs to confirm vendor arrival before work starts. The system will take record of time vendor arrived on site to time ticket was successfully closed", verbose_name='Total resolution Hours')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(help_text='Category of service provided', on_delete=django.db.models.deletion.CASCADE, related_name='category', to='general_settings.category', verbose_name='Service Category')),
            ],
            options={
                'verbose_name': 'ATM Vendor',
                'verbose_name_plural': 'ATM Vendors',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Terminals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of ATM, e.x Burma Camp ATM', max_length=100, unique=True, verbose_name='ATM Name')),
                ('terminal', models.CharField(blank=True, help_text='Name of ATM terminal, e.x 10250001', max_length=100, unique=True, verbose_name='ATM Terminal ID')),
                ('description', models.CharField(blank=True, help_text='Description of ATM terminal, e.x Sowutuom Goil', max_length=100, verbose_name='ATM Description')),
                ('gps_address', models.CharField(blank=True, help_text='GPS address of ATM terminal, e.x GP-22589-84', max_length=100, null=True, verbose_name='ATM GPS Address')),
                ('region', models.CharField(blank=True, help_text='GPS address of ATM terminal, e.x GP-22589-84', max_length=100, null=True, verbose_name='ATM Region')),
                ('type', models.CharField(blank=True, help_text='Type of ATM terminal, e.x Ncr', max_length=30, null=True, verbose_name='ATM Type')),
                ('category', models.CharField(blank=True, choices=[('branch', 'Branch'), ('offsite', 'Offsite')], max_length=100, verbose_name='Category Type')),
                ('status', models.CharField(choices=[('deployed', 'Deployed'), ('decommission', 'Decommission')], default='deployed', max_length=100, verbose_name='Status')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terminalbranch', to='general_settings.branch', verbose_name='Tagged Branch')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terminalvendor', to='general_settings.vendorcompany', verbose_name='Tagged Vendor')),
            ],
            options={
                'verbose_name': 'ATM Terminal',
                'verbose_name_plural': 'ATM Terminals',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupportProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Support Product')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(choices=[(False, 'Disable'), (True, 'Active')], default=True, verbose_name='Status')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Order Priority')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='general_settings.category', verbose_name='Parent Category')),
            ],
            options={
                'verbose_name': 'Support Products',
                'verbose_name_plural': 'Support Products',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='WebsiteContent',
            fields=[
            ],
            options={
                'verbose_name': 'Website Content',
                'verbose_name_plural': 'Website Contents',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('general_settings.websitesetting',),
        ),
        migrations.CreateModel(
            name='MailingGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Full name')),
                ('email', models.EmailField(max_length=100, verbose_name='User Email')),
                ('cluster', models.CharField(max_length=100, verbose_name='Cluster alias**')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Time')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mailgroup', to='general_settings.branch', verbose_name='Connected Branch')),
            ],
            options={
                'verbose_name': 'Mailing Group',
                'verbose_name_plural': 'Mailing Group',
                'ordering': ['-created_at'],
                'unique_together': {('email', 'branch')},
            },
        ),
    ]
